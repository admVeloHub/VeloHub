// Session Service - Gerenciamento simplificado de mem√≥ria de conversa
// VERSION: v2.0.0 | DATE: 2025-01-27 | AUTHOR: Lucas Gravina - VeloHub Development Team
const { v4: uuidv4 } = require('uuid');

class SessionService {
  constructor() {
    this.sessions = new Map(); // In-memory storage (simplificado)
    this.sessionTimeout = 10 * 60 * 1000; // 10 minutos (simplificado)
    this.maxHistoryLength = 10; // M√°ximo 10 mensagens no hist√≥rico
  }

  /**
   * Cria uma nova sess√£o para mem√≥ria de conversa (simplificado)
   * @param {string} userId - ID do usu√°rio (j√° autenticado via OAuth)
   * @returns {Object} Sess√£o criada
   */
  createSession(userId) {
    const sessionId = uuidv4();
    const session = {
      id: sessionId,
      userId: userId,
      createdAt: new Date(),
      lastActivity: new Date(),
      messages: []
    };

    this.sessions.set(sessionId, session);
    
    console.log(`‚úÖ Session: Nova sess√£o VeloBot criada para ${userId} (${sessionId})`);
    
    return session;
  }

  /**
   * Obt√©m ou cria uma sess√£o para mem√≥ria de conversa (simplificado)
   * @param {string} userId - ID do usu√°rio (j√° autenticado via OAuth)
   * @param {string} sessionId - ID da sess√£o (opcional)
   * @returns {Object} Sess√£o
   */
  getOrCreateSession(userId, sessionId = null) {
    // Se sessionId fornecido, tentar recuperar sess√£o existente
    if (sessionId && this.sessions.has(sessionId)) {
      const session = this.sessions.get(sessionId);
      
      // Verificar se a sess√£o ainda √© v√°lida (10 minutos)
      if (this.isSessionValid(session)) {
        session.lastActivity = new Date();
        console.log(`üîÑ Session: Sess√£o VeloBot recuperada para ${userId}`);
        return session;
      } else {
        // Sess√£o expirada, remover
        this.sessions.delete(sessionId);
        console.log(`‚è∞ Session: Sess√£o VeloBot expirada removida para ${userId}`);
      }
    }

    // Criar nova sess√£o
    return this.createSession(userId);
  }

  /**
   * Adiciona mensagem √† sess√£o
   * @param {string} sessionId - ID da sess√£o
   * @param {string} role - Role da mensagem (user/bot)
   * @param {string} content - Conte√∫do da mensagem
   * @param {Object} metadata - Metadados adicionais
   * @returns {boolean} Sucesso da opera√ß√£o
   */
  addMessage(sessionId, role, content, metadata = {}) {
    const session = this.sessions.get(sessionId);
    
    if (!session) {
      console.error(`‚ùå Session: Sess√£o ${sessionId} n√£o encontrada`);
      return false;
    }

    const message = {
      id: uuidv4(),
      role: role,
      content: content,
      timestamp: new Date(),
      metadata: metadata
    };

    session.messages.push(message);
    session.lastActivity = new Date();

    // Manter apenas as √∫ltimas N mensagens
    if (session.messages.length > this.maxHistoryLength) {
      session.messages = session.messages.slice(-this.maxHistoryLength);
    }

    console.log(`üí¨ Session: Mensagem adicionada √† sess√£o ${sessionId} (${role})`);
    
    return true;
  }

  /**
   * Obt√©m hist√≥rico de mensagens da sess√£o
   * @param {string} sessionId - ID da sess√£o
   * @returns {Array} Hist√≥rico de mensagens
   */
  getSessionHistory(sessionId) {
    const session = this.sessions.get(sessionId);
    
    if (!session) {
      console.error(`‚ùå Session: Sess√£o ${sessionId} n√£o encontrada`);
      return [];
    }

    return session.messages.map(msg => ({
      role: msg.role,
      content: msg.content
    }));
  }

  /**
   * Obt√©m contexto da sess√£o
   * @param {string} sessionId - ID da sess√£o
   * @returns {Object} Contexto da sess√£o
   */
  getSessionContext(sessionId) {
    const session = this.sessions.get(sessionId);
    
    if (!session) {
      return {};
    }

    return session.context;
  }

  /**
   * Atualiza contexto da sess√£o
   * @param {string} sessionId - ID da sess√£o
   * @param {Object} context - Novo contexto
   * @returns {boolean} Sucesso da opera√ß√£o
   */
  updateSessionContext(sessionId, context) {
    const session = this.sessions.get(sessionId);
    
    if (!session) {
      console.error(`‚ùå Session: Sess√£o ${sessionId} n√£o encontrada`);
      return false;
    }

    session.context = { ...session.context, ...context };
    session.lastActivity = new Date();

    console.log(`üîÑ Session: Contexto atualizado para sess√£o ${sessionId}`);
    
    return true;
  }

  /**
   * Verifica se a sess√£o √© v√°lida (n√£o expirada)
   * @param {Object} session - Sess√£o a ser verificada
   * @returns {boolean} Sess√£o v√°lida
   */
  isSessionValid(session) {
    const now = new Date();
    const timeDiff = now - session.lastActivity;
    
    return timeDiff < this.sessionTimeout;
  }

  /**
   * Remove sess√µes expiradas
   * @returns {number} N√∫mero de sess√µes removidas
   */
  cleanupExpiredSessions() {
    let removedCount = 0;
    
    for (const [sessionId, session] of this.sessions.entries()) {
      if (!this.isSessionValid(session)) {
        this.sessions.delete(sessionId);
        removedCount++;
      }
    }

    if (removedCount > 0) {
      console.log(`üßπ Session: ${removedCount} sess√µes expiradas removidas`);
    }

    return removedCount;
  }

  /**
   * Obt√©m estat√≠sticas das sess√µes
   * @returns {Object} Estat√≠sticas
   */
  getSessionStats() {
    const now = new Date();
    let activeSessions = 0;
    let expiredSessions = 0;
    let totalMessages = 0;

    for (const session of this.sessions.values()) {
      if (this.isSessionValid(session)) {
        activeSessions++;
      } else {
        expiredSessions++;
      }
      
      totalMessages += session.messages.length;
    }

    return {
      totalSessions: this.sessions.size,
      activeSessions,
      expiredSessions,
      totalMessages,
      lastCleanup: now
    };
  }

  /**
   * Remove uma sess√£o espec√≠fica
   * @param {string} sessionId - ID da sess√£o
   * @returns {boolean} Sucesso da opera√ß√£o
   */
  removeSession(sessionId) {
    const removed = this.sessions.delete(sessionId);
    
    if (removed) {
      console.log(`üóëÔ∏è Session: Sess√£o ${sessionId} removida`);
    }

    return removed;
  }

  /**
   * Inicia limpeza autom√°tica de sess√µes expiradas
   */
  startAutoCleanup() {
    // Limpeza a cada 10 minutos
    setInterval(() => {
      this.cleanupExpiredSessions();
    }, 10 * 60 * 1000);

    console.log('üîÑ Session: Limpeza autom√°tica de sess√µes iniciada');
  }
}

module.exports = new SessionService();

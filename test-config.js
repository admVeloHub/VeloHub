// Teste de Configura√ß√£o - VeloHub V3
// VERSION: v1.0.0 | DATE: 2025-01-27 | AUTHOR: Lucas Gravina - VeloHub Development Team

require('dotenv').config();
const config = require('./backend/config');

console.log('üîç VALIDA√á√ÉO DA CONFIGURA√á√ÉO VELOHUB V3');
console.log('=====================================\n');

// Validar configura√ß√£o
const validation = config.validateConfig();

console.log('üìä STATUS GERAL:');
console.log(`‚úÖ Configura√ß√£o v√°lida: ${validation.isValid ? 'SIM' : 'N√ÉO'}`);
console.log(`ü§ñ IA configurada: ${validation.hasAI ? 'SIM' : 'N√ÉO'}`);
console.log(`üìä Sheets configurado: ${validation.hasSheets ? 'SIM' : 'N√ÉO'}\n`);

if (validation.missing.length > 0) {
    console.log('‚ùå CONFIGURA√á√ïES FALTANDO:');
    validation.missing.forEach(key => {
        console.log(`   - ${key}`);
    });
    console.log('');
}

if (validation.available.length > 0) {
    console.log('‚úÖ CONFIGURA√á√ïES DISPON√çVEIS:');
    validation.available.forEach(key => {
        console.log(`   - ${key}`);
    });
    console.log('');
}

// Detalhes das APIs
console.log('üîë DETALHES DAS APIs:');
console.log(`   MongoDB: ${config.MONGODB_URI ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
console.log(`   Google OAuth: ${config.GOOGLE_CLIENT_ID ? '‚úÖ Configurado' : '‚ùå N√£o configurado'}`);
console.log(`   OpenAI: ${config.OPENAI_API_KEY ? '‚úÖ Configurado' : '‚ö†Ô∏è Opcional'}`);
console.log(`   Gemini: ${config.GEMINI_API_KEY ? '‚úÖ Configurado' : '‚ö†Ô∏è Opcional'}`);
console.log(`   Google Sheets: ${config.GOOGLE_CREDENTIALS ? '‚ö†Ô∏è Configurado (ALTO RISCO)' : '‚úÖ N√£o configurado (SEGURO)'}\n`);

// An√°lise de seguran√ßa
console.log('üîí AN√ÅLISE DE SEGURAN√áA:');
if (config.GOOGLE_CREDENTIALS) {
    console.log('   ‚ö†Ô∏è ALERTA: Google Credentials configuradas');
    console.log('   ‚ö†Ô∏è RISCO: Acesso total ao Google Cloud');
    console.log('   üí° RECOMENDA√á√ÉO: Use apenas em produ√ß√£o com service account restrita');
} else {
    console.log('   ‚úÖ SEGURO: Google Credentials n√£o configuradas');
    console.log('   ‚úÖ LOGS: Ser√£o salvos apenas no MongoDB');
}
console.log('');

// Configura√ß√µes do servidor
console.log('‚öôÔ∏è CONFIGURA√á√ïES DO SERVIDOR:');
console.log(`   Ambiente: ${config.NODE_ENV}`);
console.log(`   Porta: ${config.PORT}`);
console.log(`   Timeout API: ${config.EXTERNAL_API_TIMEOUT}ms`);
console.log(`   Cache Chatbot: ${config.CHATBOT_CACHE_TIMEOUT}ms\n`);

// Configura√ß√µes do chatbot
console.log('ü§ñ CONFIGURA√á√ïES DO CHATBOT:');
console.log(`   Spreadsheet ID: ${config.CHATBOT_SPREADSHEET_ID}`);
console.log(`   Log Sheet: ${config.CHATBOT_LOG_SHEET_NAME}\n`);

// Resumo final
if (validation.isValid) {
    console.log('üéâ CONFIGURA√á√ÉO COMPLETA!');
    console.log('   O servidor est√° pronto para ser iniciado.');
} else {
    console.log('‚ö†Ô∏è CONFIGURA√á√ÉO INCOMPLETA!');
    console.log('   Configure as chaves faltantes no arquivo .env');
    console.log('   Consulte o arquivo CONFIGURACAO_CHAVES_API.md para instru√ß√µes.');
}

console.log('\n=====================================');
console.log('Para iniciar o servidor: npm start');
console.log('Para modo desenvolvimento: npm run dev');


┌─────────────────────────────────────────────────────────────────────────────────┐
│  Nova estrutura para nálise de viabilidade e confiabilidade                     │
└─────────────────────────────────────────────────────────────────────────────────┘
quero que vc leia atentamente a proposta estrutural abaixo e entregue uma analise de viabiliade e confiabilidade da proposta, incluindo um relatorio de fluxo completo e possíveis pontos de quebra do processo.
USUÁRIO ACESSA A ABA VELOBOT  Ponto 0
          │
          ▼ IMEDIATO
┌───────────────---------------------──┐
│  VALIDAÇÃO de SESSÃO                 |
|  cache do collection Bot_perguntas   |
|  HANDSHAKE IA +determinar prioridade │
└─────────┬────----------------------──┘
          │
          ▼ Ponto1
┌─────────────────┐
│   USUÁRIO FAZ PERGUNTA
|  envia de log de pergunta (ja deveria estar funcional)(envio google sheets)
└─────────┬───────┘
          |
          |Ponto2
┌─────────────────┐
| Filtro → Prompt OTIMIZADO
└─────────┬───────┘
          │
          ▼Ponto3
┌─────────────────┐
│  CHAMADA DE IA  │
│  PRIMÁRIA       │
└─────────┬───────┘
          │
          | SE FALHA -->|CHAMADA DE IA SECUNDARIA| SE FALHA -->|BUSCA TRADICIONAL|
          ▼Ponto4
┌─────────────────┐
│  ANÁLISE IA     │
│  analyzeQuestion│
│  WithAI()       │
└─────────┬───────┘
          │
          ▼ Ponto5
┌─────────────────┐
│  RESULTADO      │
│  - 1 opção:     │
│    Resposta     │
│  - Múltiplas:   │
│    Esclarec.------>USUÁRIO ESCOLHE ITEM DESEJADO NO CLARIFICATION> RESULTADO DIRETO SEM CHAMADA DE IA   
│  - Nenhuma:     │
│    Erro         │
└─────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              PROPOSTA ATUAL                                    │
└─────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────────────────────────────┐
│                            PONTOS DE QUEBRA                                     │
└─────────────────────────────────────────────────────────────────────────────────┘

🔴 CRÍTICOS:
• MongoDB indisponível → Sistema para
• Ambas IAs falham → Busca tradicional (pode falhar)
• Filtro muito restritivo → Nenhum resultado

🟡 MÉDIOS:
• Cache de status desatualizado → IA errada
• Keywords mal configuradas → Filtro ineficaz
• Clarification sem dados → Erro

🟢 BAIXOS:
• Handshake lento → Delay inicial
• Filtro muito amplo → Performance reduzida

┌─────────────────────────────────────────────────────────────────────────────────┐
│                              RECOMENDAÇÕES                                     │
└─────────────────────────────────────────────────────────────────────────────────┘

📝 CHECKLIST DE TAREFAS (ORDEM DE EXECUÇÃO) - ATUALIZADO:

1. CORREÇÃO SCHEMA MONGODB ✅
[x] Corrigir campos do schema MongoDB (Pergunta, Resposta, Palavras-chave, Sinonimos)

2. LOG PARALELO GOOGLE SHEETS ✅
[x] Implementar log paralelo para Google Sheets (não bloqueia resposta)

3. VALIDAÇÃO E SESSÃO INICIAL ✅
[x] Mover validação e sessão para acesso inicial do VeloBot (não na pergunta)
[x] Integrar handshake das IAs no acesso inicial (VALIDAÇÃO + SESSÃO + HANDSHAKE IA)
[x] Simplificar sistema de sessão (apenas memória de conversa - 10 minutos)

4. HANDSHAKE DAS IAs ✅ (INICIALIZAÇÃO + REFRESH PERIÓDICO)
[x] Criar endpoint /api/chatbot/health-check
[x] Testar disponibilidade OpenAI e Gemini
[x] Determinar IA primária (OpenAI preferencial)
[x] Cache de status (TTL 5min)
[x] Log de handshake
[x] Implementar 3 cenários corretos do handshake:
    [x] Cenário 1: OpenAI OK → OpenAI primária + Gemini secundária
    [x] Cenário 2: OpenAI NULL + Gemini OK → Gemini primária + OpenAI secundária
    [x] Cenário 3: OpenAI NULL + Gemini NULL → Mantém primeira opção

5. FILTRO MONGODB ✅
[x] Implementar filtro por keywords/sinônimos
[x] Query otimizada com fallback amplo
[x] Reduzir de 297 para 30 perguntas relevantes (otimizado)
[x] Log de filtros aplicados

6. INVERSÃO ORDEM IAs ✅ (LÓGICA DINÂMICA)
[x] OpenAI como primária na análise
[x] Gemini como fallback
[x] Manter redundância completa
[x] Testar cenários de falha
[x] Aplicar lógica consistente em todos os endpoints

7. CLARIFICATION DIRETO ✅
[x] Armazenar dados da análise inicial
[x] Resposta direta sem re-análise
[x] Manter compatibilidade com sistema atual
[x] Log de clarification direto

8. CACHE DE STATUS ✅
[x] Implementar cache Redis/Memory
[x] TTL de 5 minutos
[x] Invalidação automática
[x] Fallback para teste direto

9. FUNÇÕES AUXILIARES ✅
[x] Implementar getBotPerguntasData() para carregar dados do MongoDB
[x] Implementar getArticlesData() para carregar dados do MongoDB
[x] Integrar carregamento de cache na inicialização

10. TESTES E VALIDAÇÃO ⏳
[ ] Testar cenários de falha das IAs
[ ] Validar performance do filtro MongoDB
[ ] Verificar logs de handshake
[ ] Teste de carga com múltiplos usuários
[ ] Validar fallback para busca tradicional
[ ] Testar clarification direto
[ ] Verificar consistência dos 3 cenários do handshake

11. OTIMIZAÇÕES FUTURAS ⏳
[ ] Implementar cache Redis para sessões (se necessário)
[ ] Otimizar queries MongoDB com índices
[ ] Implementar métricas de performance
[ ] Adicionar monitoramento de saúde das IAs
[ ] Implementar rate limiting se necessário

--------------------------------------
diagrama visual do Status do app
┌───────────────┬─────────────────┬─────────────────|─────────────────┐
|Status do APP  │ 🟢 Crédito      │ 🟢 Crédito     │ 🟡 Antecipação  │
|              │    Trabalhador   │    Pessoal      │                  │
|               ├─────────────────┼─────────────────┴─────────────────┤
|               │ 🔴 Pagamento    │ 🟢 Módulo IRPF | (pronto para )  │
|               │    Antecipado   │                 |  item adicional)│
└───────────────└─────────────────┴───────────────────────────────────┘